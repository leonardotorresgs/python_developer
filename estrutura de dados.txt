LISTAS:

    listas são MUTÁVEIS

    frutas = ["laranja","maca","uva"]
    frutas = []
    letras = list("python")
    numeros = list(range(10))
    carro = ["Ferrari", "F8", 4200000, 2020, 2900, "São Paulo", True]

    *é possível fazer matriz com uma lista dentro de outra
    *é possível fazer fatiamento com uma lista (por ex.: lista[2:])
    *criar uma cópia da lista = lista[::]
    *inverter a lista = lista[::-1]
 
    iterar/percorrer lista:
	for <carro> in <carros>:
	for <indice>, <carro> in enumerate(carros):
    
    compreensão de lista:
	numeros = [1, 20, 21, 2, 9, 65, 34]
	
	filtro versão 1:
	    pares = []
	    for <numero> in <numeros>:
		if <numero> % 2 == 0:
		    pares.append(numero)

	filtro versão 2:
	    pares = [<numero> for <numero> in <numeros> if <numero> % 2 == 0]

	modificando valores versão 1:
	    quadrado = []
	    for <numero> in <numeros>:
		quadrado.append(<numero> ** 2)
  
	modificando valores versão 2:
	    quadrado = [<numero> ** 2 for <numero> in <numeros>]

    métodos:
	lista = ["leo", "karol"]

	[].append        lista.append(1) # ["leo", "karol", 1] 
	[].clear         lista.clear() # []
	[].copy          lista.copy() # ["leo", "karol"]
	[].count         lista.count("leo") # 1
	[].extend        lista.extend(["python", 2]) # ["leo","karol", "python", 2]
	[].index         lista.index("leo") # 0
	[].pop		 lista.pop() # ["leo"]
			 lista.pop(0) # ["karol"]
	[].remove        lista.remove("leo") # ["karol"]
	[].reverse	 lista.reverse() # ["karol", "leo"]
	[].sort		 lista.sort() # ["karol", "leo"]
			 lista.sort(reverse=True) # ["leo", "karol"]
			 lista.sort(key=lambda x: len(x)) # ["leo", "karol"]
			 lista.sort(key=lambda x: len(x), reverse=True) # ["karol", "leo"]
	len		 len(lista) # 2
	sorted	  	 sorted(lista) # ["karol", "leo"]
			 sorted(lista, reverse=True) # ["leo", "karol"]
			 sorted(lista, key=lambda x: len(x)) # ["leo", "karol"]
			 sorted(lista, key=lambda x: len(x), reverse=True) # ["karol", "leo"]

TUPLAS:

    tuplas são IMUTÁVEIS

    frutas = ("laranja", "pera", "uva",)
    letras = tuple("python")
    numeros = tuple([1, 2, 3, 4])
    pais = ("Brasil",)

    *é possível fazer matriz com uma tupla dentro de outra
    *é possível fazer fatiamento com uma lista (por ex.: tupla[2:])

    iterar/percorrer tupla:
	for <carro> in <carros>:
	for <indice>, <carro> in enumerate(carros):

    métodos:

	().count
	().index
	len


CONJUNTOS:

    Um set é uma coleção que não possui objetos repetidos

    set([1, 2, 3, 1, 3, 4]) # {1, 2, 3, 4}
    set("abacaxi") # {"b", "a", "c", "x", "i"}
    set(("palio", "gol", "celta", "palio")) # {"gol", "celta", "palio"}

    *não garante ordenação
    *conjunto não suporte indexação e nem fatiamento

    converter set para lista:

	numeros = {1, 2, 3, 4}
	numeros = list(numeros)
	numeros[0]

    iterar/percorrer conjunto:
	for <carro> in <carros>:
	for <indice>, <carro> in enumerate(carros):

    métodos:
	
	{}.union         	<conjunto_a.union>(<conjunto_b>)
	    -faz a união/soma dos conjuntos

	{}.intersection	 	<conjunto_a.intersection(conjunto_b) 
	    -seleciona a intersecção(valores iguais) entre os conjuntos

	{}.difference	 	<conjunto_a>.difference(<conjunto_b>)
			 	<conjunto_b>.difference(<conjunto_a>)
	    -seleciona o que está em um conjunto e não aparece no outro

	{}.symmetric_difference <conjunto_a>.symmetric_difference(<conjunto_b>)
	    -seleciona os valores que não estão na intersecção

	{}.issubset		<conjunto_a>.issubset(<conjunto_b>) # True
				<conjunto_b>.issubset(<conjunto_a>) # False
	    -testa se o conjunto é um subconjunto(todos os elementos se repetem) do outro

	{}.issuperset		<conjunto_a>.issuperset(<conjunto_b>) # False
				<conjunto_b>.issuperset(<conjunto_a>) # True
	    -testa se o outro é um subconjunto do conjunto

	{}.isdisjoint		<conjunto_a>.isdisjoint(<conjunto_b>) # True
				<conjunto_a>.isdisjoint(<conjunto_c>) # False
	    -testa se os conjuntos são disjuntos/não se tocam/não tem elementos em comum

	{}.add			<conjunto>.add(25) # {1, 23, 25}
	{}.clear		<conjunto>.clear()
	{}.copy			<conjunto>.copy()
	{}.discard		<conjunto>.discard(1) # {0, 2, 3}
	    -remove o argumento e o programa segue mesmo se não existir

	{}.pop			<conjunto>.pop()
	    -elimina o primeiro objeto

	{}.remove		<conjunto>.remove(1) #{0, 2, 3}
	    -remove o argumento se ele existir, se não, dá erro

	len			len(<conjunto>)
	in			2 in <conjunto> # True
				4 in <conjunto> # False

DICIONÁRIOS:

    Conjunto não-ordenado de pares chave:valor, onde as chaves são únicas

    pessoa = {"nome": "Guilherme", "idade": 28}
    pessoa = dict(nome="Guilherme", idade=28)
    pesssoa["telefone"] = "3333-1234" # {"nome": "Guilherme", "idade": 28, "telefone": "3333-1234"}

    acessar um valor:
	dados["nome"] # "Guilherme"

    dicionários aninhado:
	contatos = {
	    "guilherme@gmail.com": {"nome": "Guilherme", "telefone": "333-2221"}, 
	    "giovanna@gmail.com": {"nome":"Giovanna", "telefone": "3443-2121"},
	}

	iterar/percorrer dicionário:

	    for chave in contatos:
		print(chave, contatos[chave])

	     for chave, valor in contatos.items():
		print(chave, valor)

    métodos:

	{}.clear	<dicionario>.clear()
	{}.copy		<dicionario>.copy()
	{}.fromkeys	dict.fromkeys(["nome", "telefone"]) # {"nome": None, "Telefone": None}
			dict.fromkeys(["nome", "telefone"], "vazio") # {"nome": "vazio", "telefone": "vazio"}
			*dict caso o dicionario não exista ou o nome do dicionario se ele existir
	    -criar chaves p/ o dicionário
 
	{}.get		<dicionario>.get("chave") # None
			<dicionario>.get("chave", {"não encontrado"}) # {"não encontrado"}
			<dicionario>.get("guilherme@gmail.com", {})
	    -acessar valores dentro do dicionário
	    -se a chave não existir ele retorna None ou algum valor definido

	{}.items	<dicionario>.items()
	    -retorna lista de tuplas

	{}.keys		<dicionario>.keys()
	    -retorna as chaves do dicionario

	{}.pop		<dicionario>.pop("nome")
			<dicionario>.pop("nome", {"não encontrado"})
	    -remove uma chave do dicionario e retorna o valor dela
	    -pode retornar um valor definido

	{}.popitem	<dicionario>.popitem()
	    -retira os itens na sequência
	    -se o dicionario estiver vazio retorna um KeyError

	{}.setdefault	<dicionario>.setdefault("nome", "Giovanna")
	    -se o atributo não existir ele adiciona com o valor definido
	    -se o atributo existir ele ignora o valor definido e retorna o valor já existente

	{}.update	<dicionario>.update({"nome": "leo"})
	    -atualiza um dicionário existente com os parâmetros definidos

	{}.values	<dicionario>.values()
	    -retorna os apenas os valores do dicionario sem as chaves

	in		<chave> in <dicionario> # True
			<chave*> in <dicionario>[<chave>] # False
		*chave aninhada
	    -forma elegante de verificar se uma chave existe em um dicionário

	del		del <dicionario>["chave"]["chave*"] --> remove a chave aninhada apenas
			del <dicionario>["chave"]

FUNÇÕES:






