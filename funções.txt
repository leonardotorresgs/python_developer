FUNÇÕES:

        def exibir_mensagem():
	    print("Olá mundo!")
    
        exibir_mensagem()

        def exibir_mensagem_2(nome):
	    print(f"Seja bem vindo {nome}"")

        exibir_mensagem_2(nome="Guilherme") ou ("Guilherme")

    -utilizamos a palavra reservada return
    -toda função python retorna none por padrão
    -função python pode retornar mais de um valor

	def retorna_antecessor_e_sucessor(numero):
	    antecessor = numero - 1
	    sucessor = numero + 1
	
	    return antecessor, sucessor

	retorna_antecessor_e_sucessor(10) # (9, 11)

    -os parâmetros podem ser posicionais, nomeados (modelo chave:valor) ou ambos

	def salvar_carro(marca, modelo, ano, placa):
	    print(f"Carro inserido com sucesso!") {marca}/{modelo}{ano}{placa}")

	salvar_carro("Fiat", "Palio", 1999, "ABC-1234")
	salvar_carro(marca="Fiat", modelo="Palio", ano=1999, placa="ABC-1234")
	salvar_carro(**{"marca": "Fiat", "modelo": "Palio", "ano": 1999, "placa": "ABC-1234"})

	#Carro inserido com sucesso! Fiat/Palio/1999/ABC-1234

    *args - método recebe os valores como tuplas
    **kwargs - método recebe valores como dicionario

	def exibir_poema(data_extenso, *lista, **dicionario):
	    texto: "\n".join(lista)
	    meta_dados = "\n".join([f"{chave.title()}: {valor}" for chave, valor in dicionario.items()])
	    mensagem = f"{data_extenso}\n\n{texto}\n\n{meta_dados}"
	    print(mensagem)

	exibir_poema("Sexta, 26 ago 22", "Zen of Python", "Beautiful is better than ugly.", autor="Tim Peters", ano=1999)

    -parâmetros especiais_ podemos variar os tipos de parâmetros dentro da chamada da função

	def f(pos1, pos2, /, pos_or_kwd, *, kwd1, kwd2):
	    -------------    -----------    -----------
	    positional only   positional    keyword only
			      or keyword

	positional only:
	    def criar_carro(modelo, ano, placa, /, marca, motor, combustivel):
		print(modelo, ano, placa, marca, motor, combustivel)

	    criar_carro("Palio", 1999, "ABC-1234", marca="Fiat", motor="1.0", combustivel="Gasolina")

	keyword only:
	    def criar_carro(*, modelo, ano, placa, marca, motor, combustivel):
		print(modelo, ano, placa, marca, motor, combustivel)

	    criar_carro(modelo="Palio", ano=1999, placa="ABC-1234", marca="Fiat", motor="1.0", combustivel="Gasolina")

	keyword and positional only:
	    def criar_carro(modelo, ano, placa, /, *, marca, motor, combustivel):
		print(modelo, ano, placa, marca, motor, combustivel)
	
	     criar_carro("Palio", 1999, "ABC-1234", marca="Fiat", motor="1.0", combustivel="Gasolina")

    -objetos de primeira classe
	em python tudo é objeto, então podemos
	atribuir funções a variaveis
	passá-las como parâmetro para funções
	usá-las como valores em estruturas de dados (listas, tuplas, dicionarios, etc)
	usar como valor de retorno para um função (closures)

	def somar(a, b):
	    return a + b

	def exibir_resultado(a, b, funcao):
	    resultado = funcao(a, b)
	    print(f"O resultado da operação {a} + {b} - {resultado}")

	exibir_resultado(10, 10, somar) # O resultado da opera~]ao 10 + 10 = 20

    -escopo local e escopo global

	para objetos globais podemos utilizar a palavra-chave global, mas NÃO é uma boa prática e deve ser evitado

	salario = 2000

	def salario_bonus(bonus):
	    global salario
	    salario += bonus
	    return salario

	salario_bonus(500) # 2500
